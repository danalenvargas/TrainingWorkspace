package com.ibm.cs.controller;

import java.io.IOException;
import java.util.ArrayList;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.google.gson.Gson;

import com.ibm.cs.entity.User;
import com.ibm.cs.service.UserManagementService;

/**
 * Servlet implementation class UserManagementServlet
 */
public class UserManagementServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	UserManagementService userService = new UserManagementService();
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public UserManagementServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String action = request.getParameter("action");
		
		switch(action){
			case "showpage":
				ArrayList<User> userList = userService.getStandardUsers();
				request.setAttribute("userList", userList);
				RequestDispatcher dispatcher = request.getRequestDispatcher("usermanagement.jsp");
				dispatcher.forward(request, response);
				break;
			case "getUser":
				int userId = Integer.parseInt(request.getParameter("userId"));
				User user = userService.getUser(userId);
				String jsonString = new Gson().toJson(user);
				response.setContentType("application/json");
				System.out.println(jsonString);
                response.getWriter().write(jsonString);
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String action = request.getParameter("action");
		
		switch(action){
			case "addUser":
				String username, password, userType;
				boolean canCreate, canRead, canUpdate, canDelete;
				username = request.getParameter("username");
				password = request.getParameter("password");
				userType = "user";
				canCreate = request.getParameterMap().containsKey("canCreate");
				canRead = request.getParameterMap().containsKey("canRead");
				canUpdate = request.getParameterMap().containsKey("canUpdate");
				canDelete = request.getParameterMap().containsKey("canDelete");
				userService.addUser(username, password, userType, canCreate, canRead, canUpdate, canDelete);
				response.sendRedirect("UserManagement?action=showpage");
		}
	}

}
