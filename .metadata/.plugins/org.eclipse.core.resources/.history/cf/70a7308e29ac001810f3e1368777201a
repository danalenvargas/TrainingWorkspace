package com.ibm.training;

import java.text.SimpleDateFormat;
import java.util.ArrayList;

public class Service {
	ArrayList<Product> productArray = new ArrayList<Product>();
	SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
	
	public ArrayList<Product> getProductArray() {
		return productArray;
	}

	public void setProductArray(ArrayList<Product> productArray) {
		this.productArray = productArray;
	}
	
	public void addProduct(Product newProduct) {
		for(int i=0; i<productArray.size(); i++) {
			if(!(productArray.get(i) instanceof Product)) {
				productArray.add(i, newProduct);
				break;
			}
		}
	}

	// return product at particular index
	public Product getProduct(int index) {
		return productArray.get(index);
	}
	
	// returns array of all products
	public ArrayList<Product> reviewProducts() {
		return productArray;
	}
	
	// returns array of products filtered by type (Perishable or NonPerishable)
	public ArrayList<Product> reviewProducts(EnumProdType type) {
		ArrayList<Product> newArr = new ArrayList<Product>();
		int counter = 0;
		for(int i=0; i<productArray.size(); i++) {
			if(productArray.get(i) instanceof Perishable && type == EnumProdType.PERISHABLE) {
				newArr.add(counter, productArray.get(i));
				counter++;
			}else if(productArray.get(i) instanceof NonPerishable && type == EnumProdType.NONPERISHABLE) {
				newArr.add(counter, productArray.get(i));
				counter++;
			}
		}
		return newArr;
	}
	
	// Returns string representation of any array of products
	public String arrayToString(Product[] productArray) {
		StringBuffer listing = new StringBuffer("");
		for(int i=0; i<productArray.length; i++) {
			if(productArray[i] instanceof Product) {
				listing.append(productArray[i]);
			}
		}
		return listing.toString();
	}
}
